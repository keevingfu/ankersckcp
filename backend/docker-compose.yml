# ============================================================================
# Docker Compose for Soundcore KCP Backend Development
# ============================================================================

services:
  # ==========================================================================
  # PostgreSQL Database
  # ==========================================================================
  postgres:
    image: postgres:16-alpine
    container_name: soundcore-postgres
    environment:
      POSTGRES_USER: soundcore_user
      POSTGRES_PASSWORD: soundcore_dev_password
      POSTGRES_DB: soundcore_kcp
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U soundcore_user"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - soundcore-network

  # ==========================================================================
  # MongoDB Database
  # ==========================================================================
  mongodb:
    image: mongo:7
    container_name: soundcore-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: soundcore_user
      MONGO_INITDB_ROOT_PASSWORD: soundcore_dev_password
      MONGO_INITDB_DATABASE: soundcore_kcp
    ports:
      - "27019:27017"
    volumes:
      - mongodb_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - soundcore-network

  # ==========================================================================
  # Redis Cache
  # ==========================================================================
  redis:
    image: redis:7-alpine
    container_name: soundcore-redis
    command: redis-server --requirepass soundcore_dev_password
    ports:
      - "6383:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - soundcore-network

  # ==========================================================================
  # Neo4j Graph Database
  # ==========================================================================
  neo4j:
    image: neo4j:5.15
    container_name: soundcore-neo4j
    environment:
      NEO4J_AUTH: neo4j/soundcore_dev_password
      NEO4J_PLUGINS: '["apoc"]'
      NEO4J_dbms_security_procedures_unrestricted: apoc.*
      NEO4J_dbms_memory_heap_max__size: 1G
    ports:
      - "7477:7474"  # HTTP
      - "7690:7687"  # Bolt
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "soundcore_dev_password", "RETURN 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - soundcore-network

  # ==========================================================================
  # Knowledge Service (Port 8001)
  # ==========================================================================
  knowledge-service:
    build:
      context: .
      target: development
    container_name: soundcore-knowledge-service
    environment:
      # Application
      APP_ENV: development
      DEBUG: "True"

      # PostgreSQL (container uses default 5432 internally)
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: soundcore_user
      POSTGRES_PASSWORD: soundcore_dev_password
      POSTGRES_DB: soundcore_kcp

      # MongoDB (container uses default 27017 internally)
      MONGODB_HOST: mongodb
      MONGODB_PORT: 27017
      MONGODB_USER: soundcore_user
      MONGODB_PASSWORD: soundcore_dev_password
      MONGODB_DB: soundcore_kcp

      # Neo4j (container uses default 7687 internally)
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: soundcore_dev_password

      # Redis (container uses default 6379 internally)
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: soundcore_dev_password

      # API Keys (use your own keys for development)
      OPENAI_API_KEY: ${OPENAI_API_KEY:-sk-test}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:-sk-ant-test}
      PINECONE_API_KEY: ${PINECONE_API_KEY:-test}
    ports:
      - "8001:8001"
    volumes:
      - .:/app
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    command: uvicorn knowledge_service.main:app --host 0.0.0.0 --port 8001 --reload
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8001/health/')"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - soundcore-network

# ============================================================================
# Networks
# ============================================================================
networks:
  soundcore-network:
    driver: bridge

# ============================================================================
# Volumes
# ============================================================================
volumes:
  postgres_data:
    driver: local
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
