#!/bin/bash

# Setup .env File Interactively
# Helps users create .env file safely with guided prompts

set -euo pipefail

# Color codes
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
CYAN='\033[0;36m'
NC='\033[0m'

clear

echo -e "${CYAN}"
cat << "EOF"
╔════════════════════════════════════════════════════════════╗
║                                                            ║
║   🔒 Secure Environment Setup                             ║
║                                                            ║
║   Interactive wizard to create .env file safely           ║
║                                                            ║
╚════════════════════════════════════════════════════════════╝
EOF
echo -e "${NC}"

echo ""
echo -e "${BLUE}This wizard will help you create a secure .env file.${NC}"
echo ""
echo -e "${YELLOW}⚠️  Important Security Notes:${NC}"
echo "  • Your tokens will be stored ONLY in .env file"
echo "  • .env file is already in .gitignore (won't be committed)"
echo "  • Never share your .env file or tokens with anyone"
echo ""

read -p "Press Enter to continue, or Ctrl+C to cancel..."
echo ""

# Check if .env already exists
if [ -f .env ]; then
  echo -e "${YELLOW}⚠️  Warning: .env file already exists${NC}"
  echo ""
  read -p "Do you want to overwrite it? (y/N) " -n 1 -r
  echo
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "Keeping existing .env file. Exiting..."
    exit 0
  fi
  echo ""
  echo "Backing up existing .env to .env.backup..."
  cp .env .env.backup
  echo -e "${GREEN}✅ Backup created: .env.backup${NC}"
  echo ""
fi

# Start creating .env file
echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo -e "${BLUE}📝 Creating .env file${NC}"
echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo ""

# Create .env file with header
cat > .env << 'EOF'
# Environment Variables
# Auto-generated by setup-env.sh
# 🔒 KEEP THIS FILE SECRET - DO NOT COMMIT TO GIT!

EOF

# ============================================
# GitHub Configuration
# ============================================
echo -e "${CYAN}━━━ GitHub Configuration ━━━${NC}"
echo ""
echo "Do you want to configure GitHub?"
echo ""
read -p "Configure GitHub? (Y/n) " -n 1 -r
echo
CONFIGURE_GITHUB=true
if [[ $REPLY =~ ^[Nn]$ ]]; then
  CONFIGURE_GITHUB=false
fi

if [ "$CONFIGURE_GITHUB" = true ]; then
  echo ""
  echo -e "${YELLOW}📝 GitHub Setup Instructions:${NC}"
  echo ""
  echo "1. Visit: https://github.com/settings/tokens"
  echo "2. Click 'Generate new token' → 'Generate new token (classic)'"
  echo "3. Select scopes: repo, workflow"
  echo "4. Generate and copy the token"
  echo ""

  read -p "Enter your GitHub username: " GITHUB_USERNAME
  read -p "Enter your GitHub repository name (default: ankersckcp): " GITHUB_REPO
  GITHUB_REPO=${GITHUB_REPO:-ankersckcp}

  echo ""
  echo -e "${YELLOW}⚠️  Your token will be hidden while typing${NC}"
  read -s -p "Enter your GitHub Personal Access Token: " GITHUB_TOKEN
  echo ""

  if [ -n "$GITHUB_TOKEN" ]; then
    cat >> .env << EOF

# ============================================
# GitHub Configuration
# ============================================
GITHUB_TOKEN=${GITHUB_TOKEN}
GITHUB_REPO_URL=https://github.com/${GITHUB_USERNAME}/${GITHUB_REPO}.git

EOF
    echo -e "${GREEN}✅ GitHub configuration saved${NC}"
  else
    echo -e "${YELLOW}⏩ Skipped GitHub (no token provided)${NC}"
  fi
else
  echo ""
  echo -e "${YELLOW}⏩ Skipping GitHub configuration${NC}"
fi

echo ""

# ============================================
# GitLab Configuration
# ============================================
echo -e "${CYAN}━━━ GitLab Configuration ━━━${NC}"
echo ""
echo "Do you want to configure GitLab?"
echo ""
read -p "Configure GitLab? (Y/n) " -n 1 -r
echo
CONFIGURE_GITLAB=true
if [[ $REPLY =~ ^[Nn]$ ]]; then
  CONFIGURE_GITLAB=false
fi

if [ "$CONFIGURE_GITLAB" = true ]; then
  echo ""
  echo -e "${YELLOW}📝 GitLab Setup Instructions:${NC}"
  echo ""
  echo "1. Visit: https://gitlab.com/-/profile/personal_access_tokens"
  echo "2. Click 'Add new token'"
  echo "3. Select scopes: api, read_repository, write_repository"
  echo "4. Generate and copy the token"
  echo ""

  read -p "Enter your GitLab username: " GITLAB_USERNAME
  read -p "Enter your GitLab repository name (default: ankersckcp): " GITLAB_REPO
  GITLAB_REPO=${GITLAB_REPO:-ankersckcp}

  echo ""
  echo -e "${YELLOW}⚠️  Your token will be hidden while typing${NC}"
  read -s -p "Enter your GitLab Personal Access Token: " GITLAB_TOKEN
  echo ""

  if [ -n "$GITLAB_TOKEN" ]; then
    cat >> .env << EOF

# ============================================
# GitLab Configuration
# ============================================
GITLAB_TOKEN=${GITLAB_TOKEN}
GITLAB_REPO_URL=https://gitlab.com/${GITLAB_USERNAME}/${GITLAB_REPO}.git

EOF
    echo -e "${GREEN}✅ GitLab configuration saved${NC}"
  else
    echo -e "${YELLOW}⏩ Skipped GitLab (no token provided)${NC}"
  fi
else
  echo ""
  echo -e "${YELLOW}⏩ Skipping GitLab configuration${NC}"
fi

echo ""

# ============================================
# Slack Configuration (Optional)
# ============================================
echo -e "${CYAN}━━━ Slack Notifications (Optional) ━━━${NC}"
echo ""
echo "Do you want to configure Slack notifications now?"
echo "(You can skip this and configure it later)"
echo ""
read -p "Configure Slack? (y/N) " -n 1 -r
echo
CONFIGURE_SLACK=false
if [[ $REPLY =~ ^[Yy]$ ]]; then
  CONFIGURE_SLACK=true
fi

if [ "$CONFIGURE_SLACK" = true ]; then
  echo ""
  echo -e "${YELLOW}📝 Slack Setup Instructions:${NC}"
  echo ""
  echo "1. Visit: https://api.slack.com/apps"
  echo "2. Create a new app (From scratch)"
  echo "3. Enable 'Incoming Webhooks'"
  echo "4. Add webhook to workspace"
  echo "5. Copy the webhook URL"
  echo ""

  read -p "Enter your Slack Webhook URL: " SLACK_WEBHOOK_URL

  if [ -n "$SLACK_WEBHOOK_URL" ]; then
    cat >> .env << EOF

# ============================================
# Slack Notifications
# ============================================
SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}

EOF
    echo -e "${GREEN}✅ Slack configuration saved${NC}"
  else
    echo -e "${YELLOW}⏩ Skipped Slack (no webhook provided)${NC}"
  fi
else
  echo ""
  echo -e "${YELLOW}⏩ Skipping Slack configuration${NC}"
  cat >> .env << 'EOF'

# ============================================
# Slack Notifications (Configure later)
# ============================================
# SLACK_WEBHOOK_URL=

EOF
fi

# Add remaining template sections
cat >> .env << 'EOF'

# ============================================
# Database & API Keys
# ============================================
# DATABASE_URL=
# OPENAI_API_KEY=

EOF

# ============================================
# Security Check
# ============================================
echo ""
echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo -e "${BLUE}🔒 Security Check${NC}"
echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo ""

# Verify .env is in .gitignore
if grep -q "^\.env$" .gitignore 2>/dev/null; then
  echo -e "${GREEN}✅ .env is in .gitignore${NC}"
else
  echo -e "${YELLOW}⚠️  Adding .env to .gitignore...${NC}"
  echo ".env" >> .gitignore
  echo -e "${GREEN}✅ .env added to .gitignore${NC}"
fi

# Set secure permissions
chmod 600 .env
echo -e "${GREEN}✅ File permissions set to 600 (owner read/write only)${NC}"

# Verify not tracked
if git ls-files --error-unmatch .env 2>/dev/null; then
  echo -e "${RED}❌ WARNING: .env is tracked by Git!${NC}"
  echo "Removing from Git tracking..."
  git rm --cached .env 2>/dev/null || true
  echo -e "${GREEN}✅ .env removed from Git tracking${NC}"
else
  echo -e "${GREEN}✅ .env is not tracked by Git${NC}"
fi

echo ""

# ============================================
# Summary
# ============================================
echo -e "${CYAN}"
cat << "EOF"
╔════════════════════════════════════════════════════════════╗
║                                                            ║
║   ✅ Setup Complete!                                      ║
║                                                            ║
╚════════════════════════════════════════════════════════════╝
EOF
echo -e "${NC}"

echo ""
echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo -e "${BLUE}📊 Configuration Summary${NC}"
echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo ""

if [ "$CONFIGURE_GITHUB" = true ]; then
  echo -e "  ${GREEN}✅ GitHub configured${NC}"
else
  echo -e "  ${YELLOW}⏩ GitHub not configured${NC}"
fi

if [ "$CONFIGURE_GITLAB" = true ]; then
  echo -e "  ${GREEN}✅ GitLab configured${NC}"
else
  echo -e "  ${YELLOW}⏩ GitLab not configured${NC}"
fi

if [ "$CONFIGURE_SLACK" = true ]; then
  echo -e "  ${GREEN}✅ Slack configured${NC}"
else
  echo -e "  ${YELLOW}⏩ Slack not configured${NC}"
fi

echo ""
echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo ""
echo -e "${YELLOW}🚀 Next Steps:${NC}"
echo ""

if [ "$CONFIGURE_GITHUB" = true ] || [ "$CONFIGURE_GITLAB" = true ]; then
  echo "1. Push your code to remote repository:"
  echo "   ${CYAN}./scripts/secure-git-push.sh${NC}"
  echo ""
fi

if [ "$CONFIGURE_SLACK" = false ]; then
  echo "2. Configure Slack notifications (optional):"
  echo "   • Edit .env and add SLACK_WEBHOOK_URL"
  echo "   • Or run: ${CYAN}./scripts/setup-env.sh${NC} again"
  echo ""
fi

echo "3. Read the security guide:"
echo "   ${CYAN}cat SECURITY-GUIDE.md${NC}"
echo ""

echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo ""
echo -e "${GREEN}✅ Your .env file is ready and secure!${NC}"
echo ""
echo -e "${RED}⚠️  IMPORTANT: Never commit .env to Git or share it with anyone!${NC}"
echo ""
