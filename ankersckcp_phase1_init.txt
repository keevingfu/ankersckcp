# Phase 1: 项目初始化自动化脚本

## Step 1: 创建项目目录结构

```bash
# 使用 Filesystem MCP
1. 创建根目录
   - soundcore-kcp/
   - soundcore-kcp-frontend/
   - soundcore-kcp-backend/

2. 前端目录结构
soundcore-kcp-frontend/
├── app/
│   ├── (auth)/
│   │   ├── login/
│   │   └── register/
│   ├── (dashboard)/
│   │   ├── knowledge/
│   │   ├── content/
│   │   ├── support/
│   │   ├── marketing/
│   │   ├── analytics/
│   │   └── settings/
│   └── api/
├── components/
│   ├── ui/
│   ├── business/
│   └── layouts/
├── lib/
│   ├── api/
│   ├── store/
│   ├── hooks/
│   └── utils/
├── styles/
├── public/
└── config/

3. 后端目录结构
soundcore-kcp-backend/
├── app/
│   ├── api/
│   ├── core/
│   ├── models/
│   ├── services/
│   └── utils/
├── rag_engine/
├── content_generation/
├── support_service/
├── tests/
└── config/
```

## Step 2: 初始化前端项目

```bash
# 使用 Desktop Commander MCP
# 执行命令

cd soundcore-kcp-frontend

# 1. 创建 Next.js 项目
npx create-next-app@latest . --typescript --tailwind --app --src-dir=false

# 2. 安装核心依赖
npm install @tanstack/react-query zustand axios
npm install @ant-design/pro-components antd
npm install framer-motion lucide-react
npm install @radix-ui/react-* (shadcn/ui 依赖)

# 3. 安装开发依赖
npm install -D @types/node @types/react
npm install -D eslint prettier
npm install -D vitest @testing-library/react
npm install -D storybook
```

## Step 3: 生成配置文件

### next.config.js
```javascript
/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  
  images: {
    domains: ['cdn.soundcore.com', 'images.unsplash.com'],
    formats: ['image/avif', 'image/webp']
  },

  async headers() {
    return [
      {
        source: '/api/:path*',
        headers: [
          { key: 'Access-Control-Allow-Origin', value: '*' },
          { key: 'Access-Control-Allow-Methods', value: 'GET,POST,PUT,DELETE' }
        ]
      }
    ]
  },

  webpack: (config) => {
    config.resolve.fallback = { fs: false, net: false, tls: false }
    return config
  }
}

module.exports = nextConfig
```

### tailwind.config.js
```javascript
/** @type {import('tailwindcss').Config} */
module.exports = {
  darkMode: 'class',
  content: [
    './app/**/*.{js,ts,jsx,tsx,mdx}',
    './components/**/*.{js,ts,jsx,tsx,mdx}'
  ],
  theme: {
    extend: {
      colors: {
        primary: {
          50: '#f3f1ff',
          100: '#ebe5ff',
          500: '#667eea',
          600: '#5a67d8',
          700: '#4c51bf',
          900: '#3730a3'
        },
        secondary: {
          500: '#764ba2',
          700: '#6b21a8'
        }
      },
      animation: {
        'fade-in': 'fadeIn 0.3s ease-out',
        'slide-up': 'slideUp 0.3s ease-out',
        'scale-in': 'scaleIn 0.15s ease-out'
      },
      keyframes: {
        fadeIn: {
          from: { opacity: '0' },
          to: { opacity: '1' }
        },
        slideUp: {
          from: { transform: 'translateY(10px)', opacity: '0' },
          to: { transform: 'translateY(0)', opacity: '1' }
        },
        scaleIn: {
          from: { transform: 'scale(0.95)', opacity: '0' },
          to: { transform: 'scale(1)', opacity: '1' }
        }
      }
    }
  },
  plugins: [
    require('@tailwindcss/typography'),
    require('@tailwindcss/forms')
  ]
}
```

### tsconfig.json
```json
{
  "compilerOptions": {
    "target": "ES2020",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [{ "name": "next" }],
    "paths": {
      "@/*": ["./*"],
      "@/components/*": ["./components/*"],
      "@/lib/*": ["./lib/*"],
      "@/styles/*": ["./styles/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
```

### .eslintrc.js
```javascript
module.exports = {
  extends: [
    'next/core-web-vitals',
    'plugin:@typescript-eslint/recommended',
    'prettier'
  ],
  rules: {
    '@typescript-eslint/no-unused-vars': 'warn',
    '@typescript-eslint/no-explicit-any': 'warn',
    'react-hooks/exhaustive-deps': 'warn'
  }
}
```

### .prettierrc
```json
{
  "semi": false,
  "singleQuote": true,
  "tabWidth": 2,
  "trailingComma": "es5",
  "printWidth": 100,
  "arrowParens": "always"
}
```

## Step 4: 设计系统基础文件

### design-system/colors.ts
```typescript
export const colors = {
  primary: {
    50: '#f3f1ff',
    100: '#ebe5ff',
    500: '#667eea',
    600: '#5a67d8',
    700: '#4c51bf',
    900: '#3730a3'
  },
  secondary: {
    50: '#faf5ff',
    500: '#764ba2',
    700: '#6b21a8'
  },
  success: '#10b981',
  warning: '#f59e0b',
  error: '#ef4444',
  info: '#3b82f6',
  gray: {
    50: '#f9fafb',
    100: '#f3f4f6',
    200: '#e5e7eb',
    500: '#6b7280',
    700: '#374151',
    900: '#111827'
  }
}
```

### design-system/typography.ts
```typescript
export const typography = {
  fontFamily: {
    sans: ['Inter', 'SF Pro Display', 'system-ui', 'sans-serif'],
    mono: ['Fira Code', 'Monaco', 'monospace']
  },
  fontSize: {
    xs: '0.75rem',
    sm: '0.875rem',
    base: '1rem',
    lg: '1.125rem',
    xl: '1.25rem',
    '2xl': '1.5rem',
    '3xl': '1.875rem',
    '4xl': '2.25rem'
  },
  fontWeight: {
    light: 300,
    normal: 400,
    medium: 500,
    semibold: 600,
    bold: 700
  }
}
```

## Step 5: 后端项目初始化

```bash
# 使用 Desktop Commander MCP
cd soundcore-kcp-backend

# 1. 创建虚拟环境
python -m venv venv
source venv/bin/activate  # Windows: venv\Scripts\activate

# 2. 安装核心依赖
pip install fastapi[all] uvicorn
pip install sqlalchemy alembic asyncpg
pip install langchain openai anthropic
pip install pinecone-client neo4j
pip install redis elasticsearch
pip install python-jose[cryptography] passlib bcrypt
pip install python-multipart

# 3. 安装开发依赖
pip install pytest pytest-asyncio pytest-cov
pip install black flake8 mypy
pip install httpx

# 4. 生成 requirements.txt
pip freeze > requirements.txt
```

### app/main.py
```python
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware

app = FastAPI(
    title="Soundcore KCP API",
    description="Knowledge Control Plane API",
    version="1.0.0"
)

# CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get("/")
async def root():
    return {"message": "Soundcore KCP API"}

@app.get("/health")
async def health_check():
    return {"status": "healthy"}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run("main:app", host="0.0.0.0", port=8000, reload=True)
```

## Step 6: Docker 配置

### docker-compose.yml
```yaml
version: '3.8'

services:
  # PostgreSQL
  postgres:
    image: postgres:14
    environment:
      POSTGRES_DB: soundcore_kcp
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  # Redis
  redis:
    image: redis:7
    ports:
      - "6379:6379"

  # MongoDB
  mongodb:
    image: mongo:6
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db

  # Neo4j
  neo4j:
    image: neo4j:5
    environment:
      NEO4J_AUTH: neo4j/password
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j_data:/data

  # Elasticsearch
  elasticsearch:
    image: elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - es_data:/usr/share/elasticsearch/data

volumes:
  postgres_data:
  mongodb_data:
  neo4j_data:
  es_data:
```

## Step 7: 环境变量配置

### .env.example
```bash
# Database
DATABASE_URL=postgresql://admin:password@localhost:5432/soundcore_kcp
MONGODB_URL=mongodb://localhost:27017/soundcore_kcp
REDIS_URL=redis://localhost:6379
NEO4J_URI=bolt://localhost:7687
NEO4J_USER=neo4j
NEO4J_PASSWORD=password

# AI Services
OPENAI_API_KEY=sk-...
ANTHROPIC_API_KEY=sk-ant-...
PINECONE_API_KEY=...
PINECONE_ENVIRONMENT=us-west1-gcp

# App
NEXT_PUBLIC_API_URL=http://localhost:8000
NEXT_PUBLIC_WS_URL=ws://localhost:8000

# Auth
JWT_SECRET_KEY=your-secret-key-change-in-production
```

## Step 8: Git 初始化

```bash
# 创建 .gitignore
cat > .gitignore << EOF
# Dependencies
node_modules/
__pycache__/
venv/
.env
.env.local

# Build
.next/
dist/
build/

# IDE
.vscode/
.idea/
*.swp

# OS
.DS_Store
Thumbs.db

# Logs
*.log
npm-debug.log*

# Database
*.sqlite
EOF

# 初始化 Git
git init
git add .
git commit -m "Initial commit: Project structure and configuration"
```

## 完成检查清单

- [ ] 前端项目结构创建完成
- [ ] 后端项目结构创建完成
- [ ] 所有配置文件生成完成
- [ ] Docker Compose 配置完成
- [ ] 环境变量模板创建完成
- [ ] Git 仓库初始化完成
- [ ] 依赖安装成功
- [ ] 开发服务器可以启动
- [ ] 数据库连接测试通过

## 下一步

Phase 2: 设计系统与组件库开发
